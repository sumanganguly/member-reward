'use strict';

const http = require('http');

/*
The following method is used to process error and send response according to the error
 */
module.exports.processError = function processError(err, req, res, next) {
  // Return a JSON representation of #/definitions/errors
  if (err.code) {
    res.statusCode = err.code;    
  } else {
    res.statusCode = 500;
  }
  res.setHeader('Content-Type', 'application/json');
  res.end(JSON.stringify({errors: [{message:  err.message}]}));
};

/*
The following method is used to send response to the consumer
 */
module.exports.sendResponse = function sendResponse(statusCode, obj, req, res) {
  res.statusCode = statusCode;
  switch (statusCode) {
  case 200:
    res.setHeader('Content-Type', 'application/json');
    res.end(JSON.stringify(obj || {}, null, 2));
    break;
  case 204:
    res.end();
    break;
  default:
    res.setHeader('Content-Type', 'application/json');
    res.end(JSON.stringify({errors: [{message:  http.STATUS_CODES[statusCode]}]}, null, 2));
    break;
  }
};

/*
* The following method returns error response back to consumer in case the input request parameters does not match with swagger definition
* The method will parse the default error object generated by swagger and format the same as per the error definition defined in template-service
*/
module.exports.processSwaggerValidationError = function processSwaggerValidationError(err, req, res, next) {
  let errors = [];
  if (err.results && err.results.errors) {
    err.results.errors.forEach(function(element) {
      errors.push({message: element.message});
    }, this);
  }
  res.setHeader('Content-Type', 'application/json');
  res.end(JSON.stringify({ errors: errors}));
};
